#!/bin/bash

################################################################################
# Bash script to generate forcing file from VIC grids - V.21.01.23
# modified Jan 23, 2021 - V.21.01.23
################################################################################
# created Mar 16, 2018 by anssary@gmail.com under supervision of tusharsinha.iitd@gmail.com
# the script requires a TINs & Grids mapping file that contains the TIN ID, the Grids ID, and the Grid's _Y_X
# here's a sample of this file:
# 1 243 _28.6875_-99.4375
# 2 447 _29.6875_-99.9375
# 3 268 _28.8125_-99.5625
# 4 225 _28.5625_-98.4375
# 5 197 _28.4375_-98.6875
# Usage :
	# 1) copy the script inside a folder (ex. TEST/genforc.sh)
	# 2) copy the necessary file (TINs_Grids) inside the same folder
	# 3) copy the VIC grids inside a sub-folder (ex. TEST/grids/wb_27.8125_-97.4375)
	# 4) cd to the folder (cd TEST)
	# 5) run the script (./genforc.sh)
# change the following variable names as desired
# TINs and Grids mapping file

read -p "TINs_Grids: " TINs_Grids
TINs_Grids=${TINs_Grids:-TINs_Grids}
#TINs_Grids="$TINs_Grids.TG";
# grids folder name
read -p "grids: " grids
grids=${grids:-grids}
#grids="grids";
# generated temp text files folder name
read -p "txt: " txt
txt=${txt:-txt}
#txt="txt";
# From year
read -p "y1: 1950 (accept or enter): " y1
y1=${y1:-1950}
#y1="1950";	# 0 - minutes
# y1="1951";	# 525600 - minutes
# To year
read -p "y2: 1980 (accept or enter): " y2
y2=${y2:-1980}
#y2="1954";	# 2103840 - minutes
# generated forcing file name
forc="$TINs_Grids""_$y1""_$y2"".forc";
################################################################################
# you may -CAREFULLY- change the following parameter
################################################################################
# given that the VIC grids are as follows:
#	wb_Y_X :
# 		col 1,2,3 = yr,m,d
# 		col 4,5,9,10 = TEMP,PREP,WIND,RH
# 	eb_Y_X :
# 		col 1,2,3 = yr,m,d
# 		col 6+7 = NET_SHORT_WAVE+NET_LONG_WAVE = RN
# 		col 15 = VAPOR_PRESSURE
# forcing fields source grid
forc_flds_src="wb,wb,wb,wb,eb,eb";
forc_flds_src="wb,wb,wb,wb,wb,wb";
forc_flds_src=(${forc_flds_src//,/ });
# forcing fields position in the grid file
forc_flds_col="5,4,10,9,6+7,15";
forc_flds_col="5,4,10,9,17+18,22";
forc_flds_col=(${forc_flds_col//,/ });
# fields required in the forcing file (in respective order)
# forc_flds="Prep,Temp,RH,Wind,Rn,VP,LAI,DH,MF,SS"
# forc_flds="Prep,Temp,RH,Wind,Rn,VP,LAI,RL,MF,SS"
forc_flds="Prep,Temp,RH,Wind,Rn,VP";
forc_flds=(${forc_flds//,/ });
# forcing fields factors, respectively
forc_flds_fct="/1000,*1,/100,*86400,*86400,*1000";
forc_flds_fct=(${forc_flds_fct//,/ });
################################################################################
# LAI and RL series from this reference (https://ldas.gsfc.nasa.gov/nldas/web/web.veg.monthly.table.xls)
# ex. LAI_RL="7,3,10" or LAI_RL="8"
# leave blank to use all layers (1 - 13)
# LAI_RL="6,9,7";
LAI_RL="";
################################################################################
# LAI Interception Storage Factor
LAIF="0.0002";
# Height of wind velocity observation
WindF="10";
# epsilon
epsilon="0.00001";
################################################################################
################################################################################
#					PLEASE DON'T EDIT AFTER THIS LINE
################################################################################
################################################################################
# check if we have all the necessary files
tst1=(`tr ' ' '\n'<<<"${forc_flds_src[@]}"|sort -u|tr '\n' ' '`)
tst2=(`awk '!a[$3]++{printf $3" "}' TINs_Grids`)
missing="";

for t1 in "${!tst1[@]}";do
	for t2 in "${!tst2[@]}";do
		f=$grids"/""${tst1[t1]}""${tst2[t2]}";
		if [ ! -f $f ]; then
			echo "$f is missing.";
			missing=1;
		fi;
	done;
done;

if [ $missing ]; then
	echo "Please get the missing files and try again.";
	exit;
fi;

# create txt destination folder if not exist
mkdir -p $txt;
# count how many series from the TINs_Grids file
series=`awk 'END{print $1}' $TINs_Grids`;
# count how many rows, from the 1st
rows=$grids/wb`awk '{print $3;exit}' $TINs_Grids`;
# count rows from start year to end year
rows=`awk '$1>="'$y1'"&&$1<="'$y2'"{r++}END{print r}' $rows`;
# multiply by 2, the forcing requires doubling the rows
rows=$((2 * rows));
# loop through forc_flds
for fld in "${!forc_flds[@]}"; do
	# get the src, whcih is the initial of the grid (wb or eb) that include fld
	src="${forc_flds_src[$fld]}";
	# get the column that contains the fld data
	col="${forc_flds_col[$fld]}";
	# in case of Rn sum columns 6,7
	col=${col/+/+\$};
	# short for field
	f="${forc_flds[$fld]}";
	# field factor
	ff="${forc_flds_fct[$fld]}";
	# xtra = add the Height of wind velocity observation
	if [[ "$f" = "Wind" ]];then xtra="	"$WindF;else xtra="";fi
	# create the field txt empty file
	echo -n>$txt/$f.txt;
	# display the detailed message about the current file creation
	echo -n "composing $txt/$f.txt from column ((\$$col)$ff) in $src grids ";
	# loop through series
	for (( ser=0;ser++<$series; ));do
		# # display the name of the current file
		# echo "composing $txt/${grid_flds[$i]}.txt";
		# insert the header of each series in the field txt file, and the xtra (for Wind)
		echo "$f	$ser	$rows""$xtra">>$txt/$f.txt;
		# get the grid for the current series
		grid=`awk 'NR=='"$ser"'{print $3}' $TINs_Grids`;
		# find rows in the years y1, y2 range in the grid
		# i starts with 0, write each col value twice in separate new lines
		# multiply or devide by the factor ff, the factor contains the sign (* or /)
		# write the results to the field txt file
		awk '$1>="'$y1'" && $1<="'$y2'"{printf "%.6f\t%.6f\n%.6f\t%.6f\n",i++,($'$col')'$ff',i-'$epsilon',($'$col')'$ff' >> "'$txt'/'$f'.txt"}' $grids/$src$grid;
		# remove the 1st underscore, and replace the 2nd with comma in the grid
		xy=${grid/_/};
		xy=${xy/_/,};
		# display the message about the current grid
		echo -en "\r\t\t\t\t\t\t\t\t ==> series ($ser) , grid ($xy)";
		# add extra new line after each series
		echo>>$txt/$f.txt;
	done
	echo
done
################################################################################
# start working on the last parts LAI, RL, and MF
################################################################################
# display the LAI and RL preparation message
echo "Preparing LAI and RL series"
# preparing LAI and RL arrays
# create a comma separated sequence 1 to 13
_13=`seq -s, 1 13`;
# if LAI_RL is empty fill it with 1 to 13 sequence
LAI_RL=${LAI_RL:-$_13};
# convert LAI_RL string to array
LAI_RL=(${LAI_RL//,/ });
################################################################################
# calculate no. of years
yrs=$((y2-y1+1))
# create daily sum series for years y1 to y2 (if($1>="'$y1'" && $1<="'$y2'"))
# count days in the same month (if(m==$2){d++})
# count and print sum of days by adding sums of months (print ds;ds+=d;print ds;y=$1;m=$2;d=1)
daysSum=`awk 'BEGIN{y="'$y1'";m="01";ds=0}{if($1>="'$y1'" && $1<="'$y2'"){if(m==$2){d++}else{print ds;ds+=d;print ds;y=$1;m=$2;d=1}}}END{print ds;ds+=d;print ds}' $grids/$src$grid`;
days=( $daysSum );
days=${#days[@]};
################################################################################
# get certain row from the variable array
function _getVarRow {
	sed '1,/'$1'\tSTART/d;/END/,$d' $0|sed 's/# //g'|awk -F, 'NR=='$2
}
################################################################################
# 1st LAI
# create the LAI txt empty file
echo -n>$txt/LAI.txt;
# loop through lai series
for lai in "${!LAI_RL[@]}"; do
	# insert LAI headers
	echo "LAI	$((lai+1))	$((yrs*12*2))	$LAIF">>$txt/LAI.txt;
	lais="`_getVarRow LAI ${LAI_RL[$lai]}`";
	# insert LAI series lines
	# Create the LAI series from the daysSum series and seriesLAIs
	echo $daysSum|sed 's/ /\n/g'|awk 'split("'$lais'",lais,","){lai=int((NR-1)/2)%12+1;print $1"\t"lais[lai]}'>>$txt/LAI.txt;
	# add extra new line after each series
	echo>>$txt/LAI.txt;
done;
################################################################################
# 2nd RL
# create the LAI txt empty file
echo -n>$txt/RL.txt;
# loop through rl series
for rl in "${!LAI_RL[@]}"; do
	# insert RL headers
	echo "RL	$((rl+1))	$((yrs*12*2))">>$txt/RL.txt;
	rls="`_getVarRow RL ${LAI_RL[$rl]}`";
	# insert RL series lines
	# # Create the RL series from the daysSum series and seriesLAIs
	echo $daysSum|sed 's/ /\n/g'|awk 'split("'$rls'",rls,","){rl=int((NR-1)/2)%12+1;print $1"\t"rls[rl]}'>>$txt/RL.txt;
	# add extra new line after each series
	echo>>$txt/RL.txt;
done;
################################################################################
# 3rd MF
# find the MF series in this script
# extract lines equal to no. of days in the determined time period ($y1 to $y2)
# remove the hash symbol
# replace the keyword days with the variable $days
# insert the result in an MF txt empty file
sed '1,/MF\tSTART/d;/END/,$d' $0|\
head -n $((days+1))|\
sed 's/# //g'|\
sed "s/days/$days/g"\
>$txt/MF.txt;
################################################################################
# 4th SS
################################################################################
# compose the forcing header, and put all files together in the correct order to create the forcing file
# 5 series , 0 for NumG dummy , series , LAI series , 1 melting factor , 0 source / sink
h=`printf $series' %.0s' {1..5}`'0 '$series' '${#LAI_RL[@]}' 1 0';
# create the empty forcing file
echo "Create the forcing file ($forc) and fill the header";
echo $h|sed 's/ /\t/g'>$forc;
allForcFiles="${forc_flds[@]} LAI RL MF";
allForcFiles=${allForcFiles// /.txt txt\/};
cat txt/$allForcFiles.txt >> $forc;
################################################################################
while [ ! -s $forc ]
  do
  printf "%10s \r" Finalizing ... ;
done
# sed -i 's/\\t/\t/' $forc;
echo "DONE";
################################################################################
# VARIABLE
################################################################################
# Land Cover codes
# code,type
# LC	START
# 1,Evergreen Needleleaf Forest
# 2,Evergreen Broadleaf Forest
# 3,Deciduous Needleleaf Forest
# 4,Deciduous Broadleaf Forest
# 5,Mixed Cover
# 6,Woodland
# 7,Wooded Grassland
# 8,Closed Shrubland
# 9,Open Shrubland
# 10,Grassland
# 11,Cropland
# 12,Bare Ground
# 13,Urban and Built-Up
# LC	END
################################################################################
# Leaf Area Index
# rows: code 1-13
# cols: month Jan-Dec
# LAI	START
# 8.76,9.16,9.827,10.093,10.36,10.76,10.493,10.227,10.093,9.827,9.16,8.76
# 5.117,5.117,5.117,5.117,5.117,5.117,5.117,5.117,5.117,5.117,5.117,5.117
# 8.76,9.16,9.827,10.093,10.36,10.76,10.493,10.227,10.093,9.827,9.16,8.76
# 0.52,0.52,0.867,2.107,4.507,6.773,7.173,6.507,5.04,2.173,0.867,0.52
# 4.64,4.84,5.347,6.1,7.4335,8.7665,8.833,8.367,7.5665,6,5.0135,4.64
# 5.276088,5.528588,6.006132,6.4425972,7.2448806,8.3639474,8.540044,8.126544,7.2533006,6.3291908,5.6258086,5.300508
# 2.3331824,2.4821116,2.7266101,3.0330155,3.8849492,5.5212224,6.2395131,5.7733017,4.1556703,3.1274641,2.6180116,2.4039116
# 0.580555,0.6290065,0.628558,0.628546,0.919255,1.7685454,2.5506969,2.5535975,1.7286418,0.9703975,0.726358,0.6290065
# 0.3999679,0.4043968,0.3138257,0.2232945,0.2498679,0.3300675,0.4323964,0.7999234,1.1668827,0.7977234,0.5038257,0.4043968
# 0.782,0.893,1.004,1.116,1.782,3.671,4.782,4.227,2.004,1.227,1.004,0.893
# 0.782,0.893,1.004,1.116,1.782,3.671,4.782,4.227,2.004,1.227,1.004,0.893
# 0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001
# 1.2867143,1.3945997,1.5506977,1.7727263,2.5190228,4.1367678,5.0212291,4.5795799,2.8484358,1.8856229,1.5178736,1.3656797
# LAI	END
################################################################################
# Roughness Length
# rows: code 1-13
# cols: month Jan-Dec
# RL	START
# 1.112,1.103,1.088,1.082,1.076,1.068,1.073,1.079,1.082,1.088,1.103,1.112
# 2.653,2.653,2.653,2.653,2.653,2.653,2.653,2.653,2.653,2.653,2.653,2.653
# 1.112,1.103,1.088,1.082,1.076,1.068,1.073,1.079,1.082,1.088,1.103,1.112
# 0.52,0.52,0.666,0.91,1.031,1.044,1.042,1.037,1.036,0.917,0.666,0.52
# 0.816,0.8115,0.877,0.996,1.0535,1.056,1.0575,1.058,1.059,1.0025,0.8845,0.816
# 0.7602524,0.7551426,0.7772204,0.8250124,0.846955,0.8449668,0.8471342,0.8496604,0.8514252,0.8299022,0.7857734,0.7602744
# 0.35090494,0.34920916,0.36891486,0.40567288,0.42336056,0.42338372,0.42328378,0.42485112,0.42631836,0.40881268,0.37218526,0.35096866
# 0.05641527,0.05645892,0.05557872,0.05430207,0.05425842,0.05399002,0.05361482,0.0572041,0.05892068,0.05821407,0.05709462,0.05645892
# 0.03699235,0.03699634,0.03528634,0.03272533,0.03272134,0.03270066,0.03268178,0.03907616,0.04149324,0.04032533,0.03823134,0.03699634
# 0.0777,0.0778,0.0778,0.0779,0.0778,0.0771,0.0759,0.0766,0.0778,0.0779,0.0778,0.0778
# 0.0777,0.0778,0.0778,0.0779,0.0778,0.0771,0.0759,0.0766,0.0778,0.0779,0.0778,0.0778
# 0.0112,0.0112,0.0112,0.0112,0.0112,0.0112,0.0112,0.0112,0.0112,0.0112,0.0112,0.0112
# 0.1947138,0.19413424,0.20831414,0.23348558,0.24574614,0.24605016,0.24538258,0.24630454,0.247455,0.23527388,0.20963734,0.19478494
# RL	END
################################################################################
# Melting Factor, 30 years time series
# MF	START
# MF	1	days
# 0 0.00120112
# 30 0.00130802
# 31 0.00131593
# 58 0.00163330
# 59 0.00164757
# 89 0.00213120
# 90 0.00214838
# 119 0.00263278
# 120 0.00264823
# 150 0.00303117
# 151 0.00304062
# 180 0.00319733
# 181 0.00319844
# 211 0.00309584
# 212 0.00308806
# 242 0.00274524
# 243 0.00273073
# 272 0.00226021
# 273 0.00224302
# 303 0.00175948
# 304 0.00174409
# 333 0.00137365
# 334 0.00136408
# 364 0.00120208
# 365 0.00120112
# 395 0.00130802
# 396 0.00131593
# 423 0.00163330
# 425 0.00164757
# 455 0.00213120
# 456 0.00214838
# 485 0.00263278
# 486 0.00264823
# 516 0.00303117
# 517 0.00304062
# 546 0.00319733
# 547 0.00319844
# 577 0.00309584
# 578 0.00308806
# 608 0.00274524
# 609 0.00273073
# 638 0.00226021
# 639 0.00224302
# 669 0.00175948
# 670 0.00174409
# 699 0.00137365
# 700 0.00136408
# 730 0.00120208
# 731 0.00120112
# 761 0.00130802
# 762 0.00131593
# 789 0.00163330
# 790 0.00164757
# 820 0.00213120
# 821 0.00214838
# 850 0.00263278
# 851 0.00264823
# 881 0.00303117
# 882 0.00304062
# 911 0.00319733
# 912 0.00319844
# 942 0.00309584
# 943 0.00308806
# 973 0.00274524
# 974 0.00273073
# 1003 0.00226021
# 1004 0.00224302
# 1034 0.00175948
# 1035 0.00174409
# 1064 0.00137365
# 1065 0.00136408
# 1095 0.00120208
# 1096 0.00120112
# 1126 0.00130802
# 1127 0.00131593
# 1154 0.00163330
# 1155 0.00164757
# 1185 0.00213120
# 1186 0.00214838
# 1215 0.00263278
# 1216 0.00264823
# 1246 0.00303117
# 1247 0.00304062
# 1276 0.00319733
# 1277 0.00319844
# 1307 0.00309584
# 1308 0.00308806
# 1338 0.00274524
# 1339 0.00273073
# 1368 0.00226021
# 1369 0.00224302
# 1399 0.00175948
# 1400 0.00174409
# 1429 0.00137365
# 1430 0.00136408
# 1460 0.00120208
# 1461 0.00120112
# 1491 0.00130802
# 1492 0.00131593
# 1519 0.00163330
# 1520 0.00164757
# 1550 0.00213120
# 1551 0.00214838
# 1580 0.00263278
# 1581 0.00264823
# 1611 0.00303117
# 1612 0.00304062
# 1641 0.00319733
# 1642 0.00319844
# 1672 0.00309584
# 1673 0.00308806
# 1703 0.00274524
# 1704 0.00273073
# 1733 0.00226021
# 1734 0.00224302
# 1764 0.00175948
# 1765 0.00174409
# 1794 0.00137365
# 1795 0.00136408
# 1825 0.00120208
# 1826 0.00120112
# 1856 0.00130802
# 1857 0.00131593
# 1884 0.00163330
# 1886 0.00164757
# 1916 0.00213120
# 1917 0.00214838
# 1946 0.00263278
# 1947 0.00264823
# 1977 0.00303117
# 1978 0.00304062
# 2007 0.00319733
# 2008 0.00319844
# 2038 0.00309584
# 2039 0.00308806
# 2069 0.00274524
# 2070 0.00273073
# 2099 0.00226021
# 2100 0.00224302
# 2130 0.00175948
# 2131 0.00174409
# 2160 0.00137365
# 2161 0.00136408
# 2191 0.00120208
# 2192 0.00120112
# 2222 0.00130802
# 2223 0.00131593
# 2250 0.00163330
# 2251 0.00164757
# 2281 0.00213120
# 2282 0.00214838
# 2311 0.00263278
# 2312 0.00264823
# 2342 0.00303117
# 2343 0.00304062
# 2372 0.00319733
# 2373 0.00319844
# 2403 0.00309584
# 2404 0.00308806
# 2434 0.00274524
# 2435 0.00273073
# 2464 0.00226021
# 2465 0.00224302
# 2495 0.00175948
# 2496 0.00174409
# 2525 0.00137365
# 2526 0.00136408
# 2556 0.00120208
# 2557 0.00120112
# 2587 0.00130802
# 2588 0.00131593
# 2615 0.00163330
# 2616 0.00164757
# 2646 0.00213120
# 2647 0.00214838
# 2676 0.00263278
# 2677 0.00264823
# 2707 0.00303117
# 2708 0.00304062
# 2737 0.00319733
# 2738 0.00319844
# 2768 0.00309584
# 2769 0.00308806
# 2799 0.00274524
# 2800 0.00273073
# 2829 0.00226021
# 2830 0.00224302
# 2860 0.00175948
# 2861 0.00174409
# 2890 0.00137365
# 2891 0.00136408
# 2921 0.00120208
# 2922 0.00120112
# 2952 0.00130802
# 2953 0.00131593
# 2980 0.00163330
# 2981 0.00164757
# 3011 0.00213120
# 3012 0.00214838
# 3041 0.00263278
# 3042 0.00264823
# 3072 0.00303117
# 3073 0.00304062
# 3102 0.00319733
# 3103 0.00319844
# 3133 0.00309584
# 3134 0.00308806
# 3164 0.00274524
# 3165 0.00273073
# 3194 0.00226021
# 3195 0.00224302
# 3225 0.00175948
# 3226 0.00174409
# 3255 0.00137365
# 3256 0.00136408
# 3286 0.00120208
# 3287 0.00120112
# 3317 0.00130802
# 3318 0.00131593
# 3345 0.00163330
# 3347 0.00164757
# 3377 0.00213120
# 3378 0.00214838
# 3407 0.00263278
# 3408 0.00264823
# 3438 0.00303117
# 3439 0.00304062
# 3468 0.00319733
# 3469 0.00319844
# 3499 0.00309584
# 3500 0.00308806
# 3530 0.00274524
# 3531 0.00273073
# 3560 0.00226021
# 3561 0.00224302
# 3591 0.00175948
# 3592 0.00174409
# 3621 0.00137365
# 3622 0.00136408
# 3652 0.00120208
# 3653 0.00120112
# 3683 0.00130802
# 3684 0.00131593
# 3711 0.00163330
# 3712 0.00164757
# 3742 0.00213120
# 3743 0.00214838
# 3772 0.00263278
# 3773 0.00264823
# 3803 0.00303117
# 3804 0.00304062
# 3833 0.00319733
# 3834 0.00319844
# 3864 0.00309584
# 3865 0.00308806
# 3895 0.00274524
# 3896 0.00273073
# 3925 0.00226021
# 3926 0.00224302
# 3956 0.00175948
# 3957 0.00174409
# 3986 0.00137365
# 3987 0.00136408
# 4017 0.00120208
# 4018 0.00120112
# 4048 0.00130802
# 4049 0.00131593
# 4076 0.00163330
# 4077 0.00164757
# 4107 0.00213120
# 4108 0.00214838
# 4137 0.00263278
# 4138 0.00264823
# 4168 0.00303117
# 4169 0.00304062
# 4198 0.00319733
# 4199 0.00319844
# 4229 0.00309584
# 4230 0.00308806
# 4260 0.00274524
# 4261 0.00273073
# 4290 0.00226021
# 4291 0.00224302
# 4321 0.00175948
# 4322 0.00174409
# 4351 0.00137365
# 4352 0.00136408
# 4382 0.00120208
# 4383 0.00120112
# 4413 0.00130802
# 4414 0.00131593
# 4441 0.00163330
# 4442 0.00164757
# 4472 0.00213120
# 4473 0.00214838
# 4502 0.00263278
# 4503 0.00264823
# 4533 0.00303117
# 4534 0.00304062
# 4563 0.00319733
# 4564 0.00319844
# 4594 0.00309584
# 4595 0.00308806
# 4625 0.00274524
# 4626 0.00273073
# 4655 0.00226021
# 4656 0.00224302
# 4686 0.00175948
# 4687 0.00174409
# 4716 0.00137365
# 4717 0.00136408
# 4747 0.00120208
# 4748 0.00120112
# 4778 0.00130802
# 4779 0.00131593
# 4806 0.00163330
# 4808 0.00164757
# 4838 0.00213120
# 4839 0.00214838
# 4868 0.00263278
# 4869 0.00264823
# 4899 0.00303117
# 4900 0.00304062
# 4929 0.00319733
# 4930 0.00319844
# 4960 0.00309584
# 4961 0.00308806
# 4991 0.00274524
# 4992 0.00273073
# 5021 0.00226021
# 5022 0.00224302
# 5052 0.00175948
# 5053 0.00174409
# 5082 0.00137365
# 5083 0.00136408
# 5113 0.00120208
# 5114 0.00120112
# 5144 0.00130802
# 5145 0.00131593
# 5172 0.00163330
# 5173 0.00164757
# 5203 0.00213120
# 5204 0.00214838
# 5233 0.00263278
# 5234 0.00264823
# 5264 0.00303117
# 5265 0.00304062
# 5294 0.00319733
# 5295 0.00319844
# 5325 0.00309584
# 5326 0.00308806
# 5356 0.00274524
# 5357 0.00273073
# 5386 0.00226021
# 5387 0.00224302
# 5417 0.00175948
# 5418 0.00174409
# 5447 0.00137365
# 5448 0.00136408
# 5478 0.00120208
# 5479 0.00120112
# 5509 0.00130802
# 5510 0.00131593
# 5537 0.00163330
# 5538 0.00164757
# 5568 0.00213120
# 5569 0.00214838
# 5598 0.00263278
# 5599 0.00264823
# 5629 0.00303117
# 5630 0.00304062
# 5659 0.00319733
# 5660 0.00319844
# 5690 0.00309584
# 5691 0.00308806
# 5721 0.00274524
# 5722 0.00273073
# 5751 0.00226021
# 5752 0.00224302
# 5782 0.00175948
# 5783 0.00174409
# 5812 0.00137365
# 5813 0.00136408
# 5843 0.00120208
# 5844 0.00120112
# 5874 0.00130802
# 5875 0.00131593
# 5902 0.00163330
# 5903 0.00164757
# 5933 0.00213120
# 5934 0.00214838
# 5963 0.00263278
# 5964 0.00264823
# 5994 0.00303117
# 5995 0.00304062
# 6024 0.00319733
# 6025 0.00319844
# 6055 0.00309584
# 6056 0.00308806
# 6086 0.00274524
# 6087 0.00273073
# 6116 0.00226021
# 6117 0.00224302
# 6147 0.00175948
# 6148 0.00174409
# 6177 0.00137365
# 6178 0.00136408
# 6208 0.00120208
# 6209 0.00120112
# 6239 0.00130802
# 6240 0.00131593
# 6267 0.00163330
# 6269 0.00164757
# 6299 0.00213120
# 6300 0.00214838
# 6329 0.00263278
# 6330 0.00264823
# 6360 0.00303117
# 6361 0.00304062
# 6390 0.00319733
# 6391 0.00319844
# 6421 0.00309584
# 6422 0.00308806
# 6452 0.00274524
# 6453 0.00273073
# 6482 0.00226021
# 6483 0.00224302
# 6513 0.00175948
# 6514 0.00174409
# 6543 0.00137365
# 6544 0.00136408
# 6574 0.00120208
# 6575 0.00120112
# 6605 0.00130802
# 6606 0.00131593
# 6633 0.00163330
# 6634 0.00164757
# 6664 0.00213120
# 6665 0.00214838
# 6694 0.00263278
# 6695 0.00264823
# 6725 0.00303117
# 6726 0.00304062
# 6755 0.00319733
# 6756 0.00319844
# 6786 0.00309584
# 6787 0.00308806
# 6817 0.00274524
# 6818 0.00273073
# 6847 0.00226021
# 6848 0.00224302
# 6878 0.00175948
# 6879 0.00174409
# 6908 0.00137365
# 6909 0.00136408
# 6939 0.00120208
# 6940 0.00120112
# 6970 0.00130802
# 6971 0.00131593
# 6998 0.00163330
# 6999 0.00164757
# 7029 0.00213120
# 7030 0.00214838
# 7059 0.00263278
# 7060 0.00264823
# 7090 0.00303117
# 7091 0.00304062
# 7120 0.00319733
# 7121 0.00319844
# 7151 0.00309584
# 7152 0.00308806
# 7182 0.00274524
# 7183 0.00273073
# 7212 0.00226021
# 7213 0.00224302
# 7243 0.00175948
# 7244 0.00174409
# 7273 0.00137365
# 7274 0.00136408
# 7304 0.00120208
# 7305 0.00120112
# 7335 0.00130802
# 7336 0.00131593
# 7363 0.00163330
# 7364 0.00164757
# 7394 0.00213120
# 7395 0.00214838
# 7424 0.00263278
# 7425 0.00264823
# 7455 0.00303117
# 7456 0.00304062
# 7485 0.00319733
# 7486 0.00319844
# 7516 0.00309584
# 7517 0.00308806
# 7547 0.00274524
# 7548 0.00273073
# 7577 0.00226021
# 7578 0.00224302
# 7608 0.00175948
# 7609 0.00174409
# 7638 0.00137365
# 7639 0.00136408
# 7669 0.00120208
# 7670 0.00120112
# 7700 0.00130802
# 7701 0.00131593
# 7728 0.00163330
# 7730 0.00164757
# 7760 0.00213120
# 7761 0.00214838
# 7790 0.00263278
# 7791 0.00264823
# 7821 0.00303117
# 7822 0.00304062
# 7851 0.00319733
# 7852 0.00319844
# 7882 0.00309584
# 7883 0.00308806
# 7913 0.00274524
# 7914 0.00273073
# 7943 0.00226021
# 7944 0.00224302
# 7974 0.00175948
# 7975 0.00174409
# 8004 0.00137365
# 8005 0.00136408
# 8035 0.00120208
# 8036 0.00120112
# 8066 0.00130802
# 8067 0.00131593
# 8094 0.00163330
# 8095 0.00164757
# 8125 0.00213120
# 8126 0.00214838
# 8155 0.00263278
# 8156 0.00264823
# 8186 0.00303117
# 8187 0.00304062
# 8216 0.00319733
# 8217 0.00319844
# 8247 0.00309584
# 8248 0.00308806
# 8278 0.00274524
# 8279 0.00273073
# 8308 0.00226021
# 8309 0.00224302
# 8339 0.00175948
# 8340 0.00174409
# 8369 0.00137365
# 8370 0.00136408
# 8400 0.00120208
# 8401 0.00120112
# 8431 0.00130802
# 8432 0.00131593
# 8459 0.00163330
# 8460 0.00164757
# 8490 0.00213120
# 8491 0.00214838
# 8520 0.00263278
# 8521 0.00264823
# 8551 0.00303117
# 8552 0.00304062
# 8581 0.00319733
# 8582 0.00319844
# 8612 0.00309584
# 8613 0.00308806
# 8643 0.00274524
# 8644 0.00273073
# 8673 0.00226021
# 8674 0.00224302
# 8704 0.00175948
# 8705 0.00174409
# 8734 0.00137365
# 8735 0.00136408
# 8765 0.00120208
# 8766 0.00120112
# 8796 0.00130802
# 8797 0.00131593
# 8824 0.00163330
# 8825 0.00164757
# 8855 0.00213120
# 8856 0.00214838
# 8885 0.00263278
# 8886 0.00264823
# 8916 0.00303117
# 8917 0.00304062
# 8946 0.00319733
# 8947 0.00319844
# 8977 0.00309584
# 8978 0.00308806
# 9008 0.00274524
# 9009 0.00273073
# 9038 0.00226021
# 9039 0.00224302
# 9069 0.00175948
# 9070 0.00174409
# 9099 0.00137365
# 9100 0.00136408
# 9130 0.00120208
# 9131 0.00120112
# 9161 0.00130802
# 9162 0.00131593
# 9189 0.00163330
# 9191 0.00164757
# 9221 0.00213120
# 9222 0.00214838
# 9251 0.00263278
# 9252 0.00264823
# 9282 0.00303117
# 9283 0.00304062
# 9312 0.00319733
# 9313 0.00319844
# 9343 0.00309584
# 9344 0.00308806
# 9374 0.00274524
# 9375 0.00273073
# 9404 0.00226021
# 9405 0.00224302
# 9435 0.00175948
# 9436 0.00174409
# 9465 0.00137365
# 9466 0.00136408
# 9496 0.00120208
# 9497 0.00120112
# 9527 0.00130802
# 9528 0.00131593
# 9555 0.00163330
# 9556 0.00164757
# 9586 0.00213120
# 9587 0.00214838
# 9616 0.00263278
# 9617 0.00264823
# 9647 0.00303117
# 9648 0.00304062
# 9677 0.00319733
# 9678 0.00319844
# 9708 0.00309584
# 9709 0.00308806
# 9739 0.00274524
# 9740 0.00273073
# 9769 0.00226021
# 9770 0.00224302
# 9800 0.00175948
# 9801 0.00174409
# 9830 0.00137365
# 9831 0.00136408
# 9861 0.00120208
# 9862 0.00120112
# 9892 0.00130802
# 9893 0.00131593
# 9920 0.00163330
# 9921 0.00164757
# 9951 0.00213120
# 9952 0.00214838
# 9981 0.00263278
# 9982 0.00264823
# 10012 0.00303117
# 10013 0.00304062
# 10042 0.00319733
# 10043 0.00319844
# 10073 0.00309584
# 10074 0.00308806
# 10104 0.00274524
# 10105 0.00273073
# 10134 0.00226021
# 10135 0.00224302
# 10165 0.00175948
# 10166 0.00174409
# 10195 0.00137365
# 10196 0.00136408
# 10226 0.00120208
# 10227 0.00120112
# 10257 0.00130802
# 10258 0.00131593
# 10285 0.00163330
# 10286 0.00164757
# 10316 0.00213120
# 10317 0.00214838
# 10346 0.00263278
# 10347 0.00264823
# 10377 0.00303117
# 10378 0.00304062
# 10407 0.00319733
# 10408 0.00319844
# 10438 0.00309584
# 10439 0.00308806
# 10469 0.00274524
# 10470 0.00273073
# 10499 0.00226021
# 10500 0.00224302
# 10530 0.00175948
# 10531 0.00174409
# 10560 0.00137365
# 10561 0.00136408
# 10591 0.00120208
# 10592 0.00120112
# 10622 0.00130802
# 10623 0.00131593
# 10650 0.00163330
# 10652 0.00164757
# 10682 0.00213120
# 10683 0.00214838
# 10712 0.00263278
# 10713 0.00264823
# 10743 0.00303117
# 10744 0.00304062
# 10773 0.00319733
# 10774 0.00319844
# 10804 0.00309584
# 10805 0.00308806
# 10835 0.00274524
# 10836 0.00273073
# 10865 0.00226021
# 10866 0.00224302
# 10896 0.00175948
# 10897 0.00174409
# 10926 0.00137365
# 10927 0.00136408
# 10957 0.00120208
# MF	END
################################################################################
